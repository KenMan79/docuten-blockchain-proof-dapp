{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","library","add","faCheck","faHistory","faSearch","faCalendar","faCertificate","faStamp","App","state","myDocuments","docHash","details","ipfsHash","registryInfo","accounts","contract","shouldHideDetailsSection","shouldHideSuccessAlert","shouldHideWarningAlert","shouldHideErrorAlert","successfulResponse","auditRegistries","warningResponse","handleDocHashChange","_this","bind","assertThisInitialized","handleIpfsHashChange","handleRegistryInfoChange","initializeState","_this$state","response","documents","i","documentDetail","methods","getDocumentsByOwner","call","sent","toString","split","length","getDocumentDetailsById","setState","map","doc","react_default","createElement","key","className","onClick","viewDetails","type","componentDidMount","_callee2","networkId","deployedNetwork","instance","_context2","eth","getAccounts","net","getId","ProofOfLifeContract","networks","Contract","abi","address","alert","event","target","value","e","_this2","_this$state2","certifyDocumentCreationWithIPFSHash","getTimestamp","send","from","then","result","block","blockHash","transaction","transactionHash","docId","appendAuditRegistry","_this3","getDocumentDetailsByHash","errorResponse","currentDocHash","currentDocOwner","undefined","currentDocIpfsLink","countAuditRegistriesByDocumentHash","auditRegistriesNumber","registries","getAuditRegistryByDocumentHash","auditRegistry","auditReg","disabled","rows","cols","react_fontawesome_index_es","icon","today","Date","getFormatedTimestamp","date","dd","getDate","mm","getMonth","getFullYear","getHours","getMinutes","getSeconds","href","src","width","alt","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","dangerouslySetInnerHTML","__html","placeholder","onChange","certifyDocument","addRegistryToDocument","verifyHash","class","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56abe255.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport ProofOfLifeContract from \"./contracts/ProofOfLife.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck, faHistory, faSearch, faCalendar, faCertificate, faStamp  } from '@fortawesome/free-solid-svg-icons'\nimport \"./App.css\";\n\nlibrary.add(faCheck)\nlibrary.add(faHistory)\nlibrary.add(faSearch)\nlibrary.add(faCalendar)\nlibrary.add(faCertificate);\nlibrary.add(faStamp);\n\nclass App extends Component {\n  \n  //State inicialization\n  state = { myDocuments: '', \n            docHash: '', \n            details: '',\n            ipfsHash: '',\n            registryInfo: '', \n            web3: null, \n            accounts: null, \n            contract: null,\n            shouldHideDetailsSection: true,\n            shouldHideSuccessAlert: true,           \n            shouldHideWarningAlert: true,        \n            shouldHideErrorAlert: true,\n            successfulResponse: '',\n            auditRegistries: '',\n            warningResponse: ''\n          };\n  \n  //Event Handlers  \n  handleDocHashChange = this.handleDocHashChange.bind(this);\n  handleIpfsHashChange = this.handleIpfsHashChange.bind(this);\n  handleRegistryInfoChange = this.handleRegistryInfoChange.bind(this);\n  \n  handleDocHashChange(event) {\n    this.setState({docHash: event.target.value});\n  }\n  \n  handleIpfsHashChange(event) {\n    this.setState({ipfsHash: event.target.value});\n  }\n  \n  handleRegistryInfoChange(event) {\n    this.setState({registryInfo: event.target.value});\n  }\n  \n  // Contract calls  \n  \n  // Function to certify documents on the blockchain with document hash and IFPS hash\n  certifyDocument(e) {\n    \n    const { accounts, contract, docHash, ipfsHash } = this.state;\n\n    // We display a notification explaining that we are waiting for the transaction to be mined\n    this.setState({ \n      warningResponse : 'A signed transaction will be included in the next mined block. Waiting for the Ethereum Network... ',\n      shouldHideSuccessAlert : true,\n      shouldHideErrorAlert : true,\n      shouldHideWarningAlert : false,\n      shouldHideDetailsSection: true,   \n      details: ''\n    });\n    \n    contract.methods.certifyDocumentCreationWithIPFSHash(docHash, ipfsHash, this.getTimestamp()).send({ from: accounts[0] }).then(\n       result => {\n        this.setState({ successfulResponse : \"The document with hash '\"+docHash+\"' has been certified 🤟\", \n                        block: result.blockHash,\n                        transaction: result.transactionHash,\n                        shouldHideSuccessAlert : false,\n                        shouldHideWarningAlert : true,\n                        shouldHideErrorAlert : true,\n                        shouldHideDetailsSection: true,   \n                        details: ''\n                      });\n        \n        //Refresh list of \"my documents\"\n        this.initializeState();      \n      }\n    );\n  }\n  \n  // Function allows a document owner to append audit registries to them\n  async addRegistryToDocument(e) {\n    \n    const { accounts, contract, docHash, registryInfo } = this.state;\n    \n    // We display a notification explaining that we are waiting for the transaction to be mined\n    this.setState({ \n      warningResponse : 'A signed transaction will be included in the next mined block. Waiting for the Ethereum Network... ',\n      shouldHideSuccessAlert : true,\n      shouldHideErrorAlert : true,\n      shouldHideWarningAlert : false,\n      shouldHideDetailsSection: true,   \n      details: ''\n    });\n    \n    //Retrieve document id from hash\n    const docId = await contract.methods.getId(docHash).call();\n    \n    // Append a new audit registry to the document with the current timestamp and the registry info\n    contract.methods.appendAuditRegistry(docId, registryInfo, this.getTimestamp()).send({ from: accounts[0]}).then(\n       result => {\n        this.setState({ successfulResponse : \"A new audit registry has been appended to the document with hash '\"+docHash+\"' 🤟\", \n                        block: result.blockHash,\n                        transaction: result.transactionHash,\n                        shouldHideSuccessAlert : false,\n                        shouldHideDetailsSection: true,   \n                        shouldHideWarningAlert : true,\n                        shouldHideErrorAlert : true,\n                        details: ''\n                      });  \n        \n        //Refresh list of \"my documents\"\n        this.initializeState();      \n      }\n    );\n  }\n  \n  // Function to verify document state on the blockchain (by hash)\n  async verifyHash(e){    \n    const { contract, docHash } = this.state;\n    const documentDetail = await contract.methods.getDocumentDetailsByHash(docHash).call();\n    this.viewDetails(documentDetail);\n  }\n\n  // Function to display document details and audit registries, directly from the ethereum contract  \n  async viewDetails (doc) {\n    \n    const { contract } = this.state;\n\n    // If there is not any registry in the smart contract status asocitated with docHash\n    // the returned owner will be '0x0000000000000000000000000000000000000000'\n    // In that case we display an error message explaining that that document is not certified\n    if(doc[3] === '0x0000000000000000000000000000000000000000'){\n      \n      this.setState({ \n        errorResponse : 'Sorry! There is not any document with the hash <b>'+doc[1]+'</b> certified with this dApp 😒 ',\n        shouldHideSuccessAlert : true,\n        shouldHideWarningAlert : true,\n        shouldHideErrorAlert : false,\n        shouldHideDetailsSection: true,   \n        details: ''\n      });\n      \n    // Otherwise we display the certified document details\n    } else {\n    \n      // Update state of document details in html view\n      this.setState({ shouldHideDetailsSection: false, //show details section\n                      currentDocHash :  doc[1],                     \n                      currentDocOwner :  doc[3],\n                      shouldHideSuccessAlert : true,\n                      shouldHideWarningAlert : true,\n                      shouldHideErrorAlert : true\n      }); \n      \n      // Include link to IPFS resource if available\n      if(doc[2] !== '' && doc[2] !== undefined){\n        this.setState({ currentDocIpfsLink :  '<a href=\"https://gateway.ipfs.io/ipfs/'+ doc[2]+'\">/ipfs/'+doc[2]+'</a>'  }); \n      } else {\n        this.setState({ currentDocIpfsLink :  ''  }); \n      }   \n      \n      // Retrieve also audit registries\n      const auditRegistriesNumber = await contract.methods.countAuditRegistriesByDocumentHash(doc[1]).call();\n      var registries = [];\n      for(var i = 0; i<auditRegistriesNumber; i++){\n        const auditRegistry = await contract.methods.getAuditRegistryByDocumentHash(doc[1], i).call();\n        registries[i] = auditRegistry;\n      }\n    \n      this.setState({ auditRegistries:  registries.map((auditReg, i) => <div className=\"row\" key={i}>\n                                                                            <div className=\"col-sm\"><textarea disabled=\"disabled\" rows=\"2\" cols=\"40\">{auditReg[0]}</textarea></div>                                                \n                                                                            <div className=\"col-sm\"><FontAwesomeIcon icon=\"calendar\" /> {auditReg[1]}</div>\n                                                                            <div className=\"col-sm\"><FontAwesomeIcon icon=\"history\" /> {auditReg[2].toString()}</div>\n                                                                        </div>)});\n    } // end if-else\n  }\n\n  // Function to refresh global status based on contract information\n  initializeState = async () => {\n    const { accounts, contract } = this.state;\n    \n    //Retrieve documents by logged account address\n    const response = await contract.methods.getDocumentsByOwner(accounts[0]).call();\n    var documents = response.toString().split(',');\n    \n    //Retrieve each document details\n    for(var i = 0; i<documents.length; i++){\n      const documentDetail = await contract.methods.getDocumentDetailsById(documents[i]).call();\n      documents[i] = documentDetail;\n    }\n    \n    if(documents.length > 0 && documents[0][1] !== ''){   \n      //Display list of documents (clicking on each button will display the details of each doc)   \n      this.setState({ myDocuments:  documents.map((doc, i) =><tr key={i}><td><button className=\"btn btn-outline-secondary btn-sm\"  onClick={() => {this.viewDetails(doc)}} type=\"submit\">{doc[1]}</button> </td></tr>)});\n    }\n\n    this.setState({ shouldHideWarningAlert : true, shouldHideErrorAlert: true });\n  };\n  \n  // Initial function for dApp to work\n  componentDidMount = async () => {\n    try {\n      \n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ProofOfLifeContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ProofOfLifeContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      console.log(\"dApp connected to \"+networkId);\n      console.log(\"Address: \"+deployedNetwork.address);\n      console.log(\"ABI: \"+ProofOfLifeContract.abi);\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // initialization based on the interaction with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.initializeState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n  \n  // Auxiliary functions\n  \n  // Function to get current timestamp\n  getTimestamp(){\n    var today = new Date();\n    return this.getFormatedTimestamp(today);\n  }\n  \n  // Function to get formated timestamp from unix date\n  getFormatedTimestamp(date){\n    var dd = date.getDate();\n    var mm = date.getMonth()+1;\n    var yyyy = date.getFullYear();\n\n    if(dd<10) {\n        dd = '0'+dd\n    } \n\n    if(mm<10) {\n        mm = '0'+mm\n    } \n\n    return mm + '-' + dd + '-' + yyyy + ' ' + date.getHours() + ':'+date.getMinutes()+':'+date.getSeconds() ;\n  }\n  \n  // Render function\n  render() {\n    \n    if (!this.state.web3) {\n      return (\n\n      <div className=\"App\">  \n          \n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          \n          <a className=\"navbar-brand\" href=\"#\">\n            <img src=\"https://app.docuten.com/customizations/images/logo/logo.png\" width=\"200\" alt=\"\"/>Blockchain Certification dApp\n          </a>\n        </nav>\n\n        <div className=\"container-fluid\">\n        <br></br>\n        <div className=\"row\">    \n            <div className=\"col-sm\"></div>              \n            <div className=\"col-sm\">\n                <div className=\"card\" >\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">Ready to login with Ethereum?</h5><br></br>\n                    <p className=\"card-text\"> In order to read and write on Ethereum you need a dApp-enabled browser.</p>\n                    <div className=\"container-fluid\">\n                    <div className=\"alert alert-warning\" role=\"alert\">\n                     If you are not using a dApp enabled browser you can install the <a href=\"http://metamask.com\" target=\"_blank\">Metamask</a> plugin and login! \n                     </div></div>                    \n                  </div>\n                  <img class=\"card-img-top\" src=\"https://dgrmunch.github.io/docuten-blockchain-proof-dapp/metamaskConnectorLogo.png\" alt=\"Metamask not loaded yet\"></img>\n                  \n                </div>\n            </div>\n            <div className=\"col-sm\"></div>\n        </div>\n        </div>\n       </div>\n      );\n    }\n    return (\n      \n      <div className=\"App\">  \n          \n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          \n          <a className=\"navbar-brand\" href=\"#\">\n            <img src=\"https://app.docuten.com/customizations/images/logo/logo.png\" width=\"200\" alt=\"\"/>Blockchain Certification dApp\n          </a>\n         \n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\"></li>\n              <li className=\"nav-item\"></li>             \n            </ul>\n            \n            <form className=\"form-inline my-2 my-lg-0\">\n              <span className=\"badge badge-info\">Logged as <b>{this.state.accounts[0]}</b></span><br></br>\n            </form>\n          </div>\n          \n      </nav>\n      \n      <div className=\"container-fluid\">\n        <div className=\"row\">\n        \n          <div className=\"col-2\">\n              <br></br>\n              <h5>My Documents</h5>\n              <table><tbody><tr><td></td></tr>{this.state.myDocuments}</tbody></table>\n          </div>\n        \n          <div className=\"col-10\">\n                <br></br>\n                <div className=\"container-fluid\">\n                   <div className={this.state.shouldHideSuccessAlert ? 'hidden' : ''}>\n                      <div className=\"alert alert-success\" role=\"alert\">\n                          {this.state.successfulResponse}\n                          <br></br>🧐 Block: <b>{this.state.block}</b>\n                          <br></br>🧙‍♂️ Tx: <b>{this.state.transaction}</b>\n                          \n                      </div>\n                    </div>\n                    \n                    <div className={this.state.shouldHideWarningAlert ? 'hidden' : ''}>\n                      <div className=\"alert alert-warning\" role=\"alert\">\n                          {this.state.warningResponse}<br></br>\n                          <img src=\"https://dgrmunch.github.io/docuten-blockchain-proof-dapp/ajax-loader.gif\"></img>\n                        </div>\n                    </div>\n\n                    <div className={this.state.shouldHideErrorAlert ? 'hidden' : ''}>\n                      <div className=\"alert alert-danger\" role=\"alert\">\n                        <span dangerouslySetInnerHTML={{__html: this.state.errorResponse}}/><br></br>\n                      </div>\n                    </div>\n                 \n                   <div className=\"container-fluid\">\n                      <div className=\"row\">                  \n                        <div className=\"col-sm\">\n                            <div className=\"card\" >\n                              <div className=\"card-body\">\n                                <h5 className=\"card-title\"> <FontAwesomeIcon icon=\"check\" /> Proof-of-Existence</h5>\n                                <p className=\"card-text\">It allows the owner of a document to certify its existence and inmutability in the blockchain.</p>\n                                <div className=\"container-fluid\">\n                                  <input className=\"form-control\" type=\"search\" placeholder=\"Document Hash\"  onChange={this.handleDocHashChange} />\n                                </div><br></br>\n                                <div className=\"container-fluid\">\n                                  <input className=\"form-control\" type=\"search\" placeholder=\"IPFS Hash (Optional)\"  onChange={this.handleIpfsHashChange} />\n                                </div><br></br>\n                                <div className=\"container-fluid\">\n                                  <button className=\"btn btn-primary\"  onClick={this.certifyDocument.bind(this)} type=\"submit\">Certify document</button> \n                                </div>\n                              </div>\n                            </div>\n                        </div>\n                        <div className=\"col-sm\">\n                            <div className=\"card\" >\n                             <div className=\"card-body\">\n                                <h5 className=\"card-title\"><FontAwesomeIcon icon=\"history\" /> Proof-of-Life</h5>\n                                <p className=\"card-text\">It allows the owner of a document to append audit registries to a certified document.</p>\n                                <div className=\"container-fluid\">\n                                  <input className=\"form-control\" type=\"search\" placeholder=\"Document Hash\"  onChange={this.handleDocHashChange} />\n                                </div><br></br>\n                                <div className=\"container-fluid\">\n                                  <input className=\"form-control\" type=\"search\" placeholder=\"Registry info\"  onChange={this.handleRegistryInfoChange} />\n                                </div><br></br>\n                                <div className=\"container-fluid\">\n                                  <button className=\"btn btn-outline-primary\"  onClick={this.addRegistryToDocument.bind(this)} type=\"submit\">Add registry to document</button> \n                                </div>\n                              </div>\n                            </div>\n                        </div>\n                        <div className=\"col-sm\">\n                          <div className=\"card\" >\n                             <div className=\"card-body\">\n                                <h5 className=\"card-title\"><FontAwesomeIcon icon=\"search\" /> Verify Document Hash</h5>\n                                <p className=\"card-text\">It allows everybody to verify the status of a document and audit its history.</p>\n                                <div className=\"container-fluid\">\n                                  <input className=\"form-control\" type=\"search\" placeholder=\"Document Hash\"  onChange={this.handleDocHashChange} />\n                                </div><br></br>\n                                <div className=\"container-fluid\">\n                                  <button className=\"btn btn-outline-success\"  onClick={this.verifyHash.bind(this)} type=\"submit\">Verify document</button> \n                                </div> \n                               </div>\n                            </div>\n                        </div>\n                      </div>               \n                              \n                      <div className=\"row\">\n                        <div className=\"col-sm\">\n                            <br/>\n                            <div className={this.state.shouldHideDetailsSection ? 'hidden' : ''}>\n                              <div className=\"jumbotron\">\n                                <h3 className=\"display-5\"><FontAwesomeIcon icon=\"stamp\" /> {this.state.currentDocHash}</h3>\n                                <h4><span className=\"badge badge-success\"><FontAwesomeIcon icon=\"certificate\" /> Certified Document</span></h4>\n                                <br/><span className=\"badge badge-light\">Owned by {this.state.currentDocOwner}</span>\n                                <p className=\"lead\"><span dangerouslySetInnerHTML={{__html: this.state.currentDocIpfsLink}}/></p>\n                                <hr className=\"my-4\"/>\n                                <div className=\"container-fluid\">\n                                    <div className=\"row\">\n                                        <div className=\"col-sm\"><b>Event Description</b></div>                                                \n                                        <div className=\"col-sm\"><b>System Timestamp</b></div>\n                                        <div className=\"col-sm\"><b>Block Timestamp</b></div>\n                                    </div>\n                                    <div className=\"row\">\n                                       <br/>\n                                    </div>\n                                    {this.state.auditRegistries}\n                                </div>                               \n                              </div>  \n                            </div>                    \n                      </div>    \n                    </div>\n                              \n                              \n                                \n                    </div>  </div> \n                    </div>\n                \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}